"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Conversation_1 = require("./../src/conversations/Conversation");
const Message_1 = require("../src/Message");
const helpers_1 = require("../test/helpers");
const crypto_1 = require("../src/crypto");
const helpers_2 = require("./helpers");
const benny_1 = require("benny");
const proto_1 = require("@xmtp/proto");
const utils_1 = require("../src/utils");
const decodeV1 = () => {
    return helpers_2.MESSAGE_SIZES.map((size) => (0, benny_1.add)(`decode and decrypt a ${size} byte v1 message`, async () => {
        const alice = await (0, helpers_1.newLocalHostClient)();
        const bob = await (0, helpers_2.newPrivateKeyBundle)();
        const message = (0, helpers_2.randomBytes)(size);
        const encodedMessage = await Message_1.MessageV1.encode(alice.keystore, await alice.encodeContent(message), alice.publicKeyBundle, bob.getPublicKeyBundle(), new Date());
        const messageBytes = encodedMessage.toBytes();
        const convo = new Conversation_1.ConversationV1(alice, bob.identityKey.publicKey.walletSignatureAddress(), new Date());
        const envelope = {
            contentTopic: convo.topic,
            message: proto_1.fetcher.b64Encode(messageBytes, 0, messageBytes.length),
        };
        return async () => {
            await convo.decodeMessage(envelope);
        };
    }));
};
const decodeV2 = () => {
    return helpers_2.MESSAGE_SIZES.map((size) => (0, benny_1.add)(`decode and decrypt a ${size} byte v2 message`, async () => {
        const alice = await (0, helpers_1.newLocalHostClient)();
        const bob = await (0, helpers_2.newPrivateKeyBundle)();
        const message = (0, helpers_2.randomBytes)(size);
        const invite = await alice.keystore.createInvite({
            recipient: crypto_1.SignedPublicKeyBundle.fromLegacyBundle(bob.getPublicKeyBundle()),
            createdNs: (0, utils_1.dateToNs)(new Date()),
            context: undefined,
        });
        const convo = new Conversation_1.ConversationV2(alice, invite.conversation?.topic ?? '', bob.identityKey.publicKey.walletSignatureAddress(), new Date(), undefined);
        const payload = await alice.encodeContent(message);
        const encodedMessage = await convo.createMessage(payload);
        const messageBytes = encodedMessage.toBytes();
        const envelope = {
            contentTopic: convo.topic,
            message: proto_1.fetcher.b64Encode(messageBytes, 0, messageBytes.length),
        };
        return async () => {
            await convo.decodeMessage(envelope);
        };
    }));
};
exports.default = (0, helpers_2.wrapSuite)('decode', ...decodeV1(), ...decodeV2());
//# sourceMappingURL=decode.js.map