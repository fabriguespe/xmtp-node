"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Conversation_1 = require("./../src/conversations/Conversation");
const Message_1 = require("../src/Message");
const benny_1 = require("benny");
const src_1 = require("../src");
const helpers_1 = require("../test/helpers");
const crypto_1 = require("../src/crypto");
const helpers_2 = require("./helpers");
const encodeV1 = () => {
    return helpers_2.MESSAGE_SIZES.map((size) => (0, benny_1.add)(`encode and encrypt a ${size} byte v1 message`, async () => {
        const alice = await src_1.Client.create((0, helpers_1.newWallet)(), { env: 'local' });
        const bobKeys = (await (0, helpers_2.newPrivateKeyBundle)()).getPublicKeyBundle();
        const message = (0, helpers_2.randomBytes)(size);
        const timestamp = new Date();
        // The returned function is the actual benchmark. Everything above is setup
        return async () => {
            const encodedMessage = await alice.encodeContent(message);
            await Message_1.MessageV1.encode(alice.keystore, encodedMessage, alice.publicKeyBundle, bobKeys, timestamp);
        };
    }));
};
const encodeV2 = () => {
    // All these sizes should take roughly the same amount of time
    return helpers_2.MESSAGE_SIZES.map((size) => (0, benny_1.add)(`encode and encrypt a ${size} byte v2 message`, async () => {
        const alice = await (0, helpers_1.newLocalHostClient)();
        const bob = await (0, helpers_2.newPrivateKeyBundle)();
        const invite = await alice.keystore.createInvite({
            recipient: crypto_1.SignedPublicKeyBundle.fromLegacyBundle(bob.getPublicKeyBundle()),
            createdNs: (0, src_1.dateToNs)(new Date()),
            context: undefined,
        });
        const convo = new Conversation_1.ConversationV2(alice, invite.conversation?.topic ?? '', bob.identityKey.publicKey.walletSignatureAddress(), new Date(), undefined);
        const message = (0, helpers_2.randomBytes)(size);
        const payload = await alice.encodeContent(message);
        // The returned function is the actual benchmark. Everything above is setup
        return async () => {
            await convo.createMessage(payload);
        };
    }));
};
exports.default = (0, helpers_2.wrapSuite)('encode', ...encodeV1(), ...encodeV2());
//# sourceMappingURL=encode.js.map