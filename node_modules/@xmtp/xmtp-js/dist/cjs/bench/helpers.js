"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MESSAGE_SIZES = exports.wrapSuite = exports.newPrivateKeyBundle = exports.randomBytes = void 0;
const benny_1 = require("benny");
const crypto_1 = __importDefault(require("../src/crypto/crypto"));
const PrivateKeyBundle_1 = require("../src/crypto/PrivateKeyBundle");
const helpers_1 = require("../test/helpers");
const MAX_RANDOM_BYTES_SIZE = 65536;
const randomBytes = (size) => {
    const out = new Uint8Array(size);
    let remaining = size;
    while (remaining > 0) {
        const chunkSize = remaining < MAX_RANDOM_BYTES_SIZE ? remaining : MAX_RANDOM_BYTES_SIZE;
        const chunk = crypto_1.default.getRandomValues(new Uint8Array(chunkSize));
        out.set(chunk, size - remaining);
        remaining -= MAX_RANDOM_BYTES_SIZE;
    }
    return out;
};
exports.randomBytes = randomBytes;
const newPrivateKeyBundle = () => PrivateKeyBundle_1.PrivateKeyBundleV1.generate((0, helpers_1.newWallet)());
exports.newPrivateKeyBundle = newPrivateKeyBundle;
// Async test suites should be wrapped in a function so that they can be run one at a time
const wrapSuite = (name, ...tests) => () => (0, benny_1.suite)(name, ...tests, (0, benny_1.cycle)(), (0, benny_1.save)({ file: name, folder: 'bench/results', format: 'json' }), (0, benny_1.save)({ file: name, folder: 'bench/results', format: 'table.html' }), (0, benny_1.save)({ file: name, folder: 'bench/results', format: 'chart.html' }));
exports.wrapSuite = wrapSuite;
exports.MESSAGE_SIZES = [128, 65536, 524288];
//# sourceMappingURL=helpers.js.map