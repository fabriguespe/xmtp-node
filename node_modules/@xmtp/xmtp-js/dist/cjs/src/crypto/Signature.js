"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletSigner = exports.AccountLinkedRole = exports.ecdsaSignerKey = void 0;
const proto_1 = require("@xmtp/proto");
const long_1 = __importDefault(require("long"));
const secp = __importStar(require("@noble/secp256k1"));
const PublicKey_1 = require("./PublicKey");
const PrivateKey_1 = require("./PrivateKey");
const ethers_1 = require("ethers");
const utils_1 = require("./utils");
// Validate signature.
function ecdsaCheck(sig) {
    if (sig.bytes.length !== 64) {
        throw new Error(`invalid signature length: ${sig.bytes.length}`);
    }
    if (sig.recovery !== 0 && sig.recovery !== 1) {
        throw new Error(`invalid recovery bit: ${sig.recovery}`);
    }
}
// Compare signatures.
function ecdsaEqual(a, b) {
    return a.recovery === b.recovery && (0, utils_1.equalBytes)(a.bytes, b.bytes);
}
// Derive public key of the signer from the digest and the signature.
function ecdsaSignerKey(digest, signature) {
    const bytes = secp.recoverPublicKey(digest, signature.bytes, signature.recovery);
    return bytes
        ? new PublicKey_1.UnsignedPublicKey({
            secp256k1Uncompressed: { bytes },
            createdNs: long_1.default.fromNumber(0),
        })
        : undefined;
}
exports.ecdsaSignerKey = ecdsaSignerKey;
class Signature {
    constructor(obj) {
        if (obj.ecdsaCompact) {
            ecdsaCheck(obj.ecdsaCompact);
            this.ecdsaCompact = obj.ecdsaCompact;
        }
        else if (obj.walletEcdsaCompact) {
            ecdsaCheck(obj.walletEcdsaCompact);
            this.walletEcdsaCompact = obj.walletEcdsaCompact;
        }
        else {
            throw new Error('invalid signature');
        }
    }
    // Return the public key that validates provided key's signature.
    async signerKey(key) {
        if (this.ecdsaCompact) {
            return PrivateKey_1.SignedPrivateKey.signerKey(key, this.ecdsaCompact);
        }
        else if (this.walletEcdsaCompact) {
            return WalletSigner.signerKey(key, this.walletEcdsaCompact);
        }
        else {
            return undefined;
        }
    }
    // LEGACY: Return the public key that validates this signature given the provided digest.
    // Return undefined if the signature is malformed.
    getPublicKey(digest) {
        let bytes;
        if (this.ecdsaCompact) {
            bytes = secp.recoverPublicKey(digest, this.ecdsaCompact.bytes, this.ecdsaCompact.recovery);
        }
        else if (this.walletEcdsaCompact) {
            bytes = secp.recoverPublicKey(digest, this.walletEcdsaCompact.bytes, this.walletEcdsaCompact.recovery);
        }
        else {
            throw new Error('invalid v1 signature');
        }
        return bytes
            ? new PublicKey_1.PublicKey({
                secp256k1Uncompressed: { bytes },
                timestamp: long_1.default.fromNumber(0),
            })
            : undefined;
    }
    // Is this the same/equivalent signature as other?
    equals(other) {
        if (this.ecdsaCompact && other.ecdsaCompact) {
            return ecdsaEqual(this.ecdsaCompact, other.ecdsaCompact);
        }
        if (this.walletEcdsaCompact && other.walletEcdsaCompact) {
            return ecdsaEqual(this.walletEcdsaCompact, other.walletEcdsaCompact);
        }
        return false;
    }
    toBytes() {
        return proto_1.signature.Signature.encode(this).finish();
    }
    static fromBytes(bytes) {
        return new Signature(proto_1.signature.Signature.decode(bytes));
    }
}
exports.default = Signature;
var AccountLinkedRole;
(function (AccountLinkedRole) {
    AccountLinkedRole[AccountLinkedRole["INBOX_KEY"] = 0] = "INBOX_KEY";
    AccountLinkedRole[AccountLinkedRole["SEND_KEY"] = 1] = "SEND_KEY";
})(AccountLinkedRole = exports.AccountLinkedRole || (exports.AccountLinkedRole = {}));
// A wallet based KeySigner.
class WalletSigner {
    constructor(wallet) {
        this.wallet = wallet;
    }
    static identitySigRequestText(keyBytes) {
        // Note that an update to this signature request text will require
        // addition of backward compatibility for existing signatures
        // and/or a migration; otherwise clients will fail to verify previously
        // signed keys.
        return ('XMTP : Create Identity\n' +
            `${(0, utils_1.bytesToHex)(keyBytes)}\n` +
            '\n' +
            'For more info: https://xmtp.org/signatures/');
    }
    static signerKey(key, signature) {
        const digest = (0, utils_1.hexToBytes)(ethers_1.utils.hashMessage(this.identitySigRequestText(key.bytesToSign())));
        return ecdsaSignerKey(digest, signature);
    }
    async signKey(key) {
        const keyBytes = key.toBytes();
        const sigString = await this.wallet.signMessage(WalletSigner.identitySigRequestText(keyBytes));
        const eSig = ethers_1.utils.splitSignature(sigString);
        const r = (0, utils_1.hexToBytes)(eSig.r);
        const s = (0, utils_1.hexToBytes)(eSig.s);
        const sigBytes = new Uint8Array(64);
        sigBytes.set(r);
        sigBytes.set(s, r.length);
        const signature = new Signature({
            walletEcdsaCompact: {
                bytes: sigBytes,
                recovery: eSig.recoveryParam,
            },
        });
        return new PublicKey_1.SignedPublicKey({ keyBytes, signature });
    }
}
exports.WalletSigner = WalletSigner;
//# sourceMappingURL=Signature.js.map