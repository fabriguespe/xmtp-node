"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decrypt = exports.encrypt = exports.sha256 = void 0;
const Ciphertext_1 = __importStar(require("./Ciphertext"));
const crypto_1 = __importDefault(require("./crypto"));
const hkdfNoInfo = new ArrayBuffer(0);
// This is a variation of https://github.com/paulmillr/noble-secp256k1/blob/main/index.ts#L1378-L1388
// that uses `digest('SHA-256', bytes)` instead of `digest('SHA-256', bytes.buffer)`
// which seems to produce different results.
async function sha256(bytes) {
    return new Uint8Array(await crypto_1.default.subtle.digest('SHA-256', bytes));
}
exports.sha256 = sha256;
// symmetric authenticated encryption of plaintext using the secret;
// additionalData is used to protect un-encrypted parts of the message (header)
// in the authentication scope of the encryption.
async function encrypt(plain, secret, additionalData) {
    const salt = crypto_1.default.getRandomValues(new Uint8Array(Ciphertext_1.KDFSaltSize));
    const nonce = crypto_1.default.getRandomValues(new Uint8Array(Ciphertext_1.AESGCMNonceSize));
    const key = await hkdf(secret, salt);
    const encrypted = await crypto_1.default.subtle.encrypt(aesGcmParams(nonce, additionalData), key, plain);
    return new Ciphertext_1.default({
        aes256GcmHkdfSha256: {
            payload: new Uint8Array(encrypted),
            hkdfSalt: salt,
            gcmNonce: nonce,
        },
    });
}
exports.encrypt = encrypt;
// symmetric authenticated decryption of the encrypted ciphertext using the secret and additionalData
async function decrypt(encrypted, secret, additionalData) {
    if (!encrypted.aes256GcmHkdfSha256) {
        throw new Error('invalid payload ciphertext');
    }
    const key = await hkdf(secret, encrypted.aes256GcmHkdfSha256.hkdfSalt);
    const decrypted = await crypto_1.default.subtle.decrypt(aesGcmParams(encrypted.aes256GcmHkdfSha256.gcmNonce, additionalData), key, encrypted.aes256GcmHkdfSha256.payload);
    return new Uint8Array(decrypted);
}
exports.decrypt = decrypt;
// helper for building Web Crypto API encryption parameter structure
function aesGcmParams(nonce, additionalData) {
    const spec = {
        name: 'AES-GCM',
        iv: nonce,
    };
    if (additionalData) {
        spec.additionalData = additionalData;
    }
    return spec;
}
// Derive AES-256-GCM key from a shared secret and salt.
// Returns crypto.CryptoKey suitable for the encrypt/decrypt API
async function hkdf(secret, salt) {
    const key = await crypto_1.default.subtle.importKey('raw', secret, 'HKDF', false, [
        'deriveKey',
    ]);
    return crypto_1.default.subtle.deriveKey({ name: 'HKDF', hash: 'SHA-256', salt, info: hkdfNoInfo }, key, { name: 'AES-GCM', length: 256 }, false, ['encrypt', 'decrypt']);
}
//# sourceMappingURL=encryption.js.map