"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const proto_1 = require("@xmtp/proto");
const bytes_1 = require("../../utils/bytes");
const topic_1 = require("../../utils/topic");
class TopicPersistence {
    constructor(apiClient) {
        this.apiClient = apiClient;
    }
    // Returns the first record in a topic if it is present.
    async getItem(key) {
        for await (const env of this.apiClient.queryIterator({ contentTopic: this.buildTopic(key) }, {
            pageSize: 1,
            direction: proto_1.messageApi.SortDirection.SORT_DIRECTION_DESCENDING,
        })) {
            if (!env.message)
                continue;
            try {
                const bytes = (0, bytes_1.b64Decode)(env.message.toString());
                return Uint8Array.from(bytes);
            }
            catch (e) {
                console.log(e);
            }
        }
        return null;
    }
    async setItem(key, value) {
        const keys = Uint8Array.from(value);
        await this.apiClient.publish([
            {
                contentTopic: this.buildTopic(key),
                message: keys,
            },
        ]);
    }
    setAuthenticator(authenticator) {
        this.apiClient.setAuthenticator(authenticator);
    }
    buildTopic(key) {
        return (0, topic_1.buildUserPrivateStoreTopic)(key);
    }
}
exports.default = TopicPersistence;
//# sourceMappingURL=TopicPersistence.js.map