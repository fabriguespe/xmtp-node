"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("../../crypto");
const InMemoryKeystore_1 = __importDefault(require("../InMemoryKeystore"));
const TopicPersistence_1 = __importDefault(require("../persistence/TopicPersistence"));
const errors_1 = require("./errors");
const helpers_1 = require("./helpers");
const NetworkKeyManager_1 = __importDefault(require("./NetworkKeyManager"));
/**
 * KeyGeneratorKeystoreProvider will create a new XMTP `PrivateKeyBundle` and persist it to the network
 * This provider should always be specified last in the list of `keystoreProviders` on client creation,
 * as it will overwrite any XMTP identities already on the network
 */
class KeyGeneratorKeystoreProvider {
    async newKeystore(opts, apiClient, wallet) {
        if (!wallet) {
            throw new errors_1.KeystoreProviderUnavailableError('Wallet required to generate new keys');
        }
        if (opts.preCreateIdentityCallback) {
            await opts.preCreateIdentityCallback();
        }
        const bundle = await crypto_1.PrivateKeyBundleV1.generate(wallet);
        const manager = new NetworkKeyManager_1.default(wallet, new TopicPersistence_1.default(apiClient), opts.preEnableIdentityCallback);
        await manager.storePrivateKeyBundle(bundle);
        return InMemoryKeystore_1.default.create(bundle, await (0, helpers_1.buildPersistenceFromOptions)(opts, bundle));
    }
}
exports.default = KeyGeneratorKeystoreProvider;
//# sourceMappingURL=KeyGeneratorKeystoreProvider.js.map