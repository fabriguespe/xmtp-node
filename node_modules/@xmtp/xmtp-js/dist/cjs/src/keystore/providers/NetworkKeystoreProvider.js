"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const NetworkKeyManager_1 = __importDefault(require("./NetworkKeyManager"));
const errors_1 = require("./errors");
const TopicPersistence_1 = __importDefault(require("../persistence/TopicPersistence"));
const InMemoryKeystore_1 = __importDefault(require("../InMemoryKeystore"));
const helpers_1 = require("./helpers");
/**
 * NetworkKeystoreProvider will look on the XMTP network for an `EncryptedPrivateKeyBundle`
 * on the user's private storage topic. If found, will decrypt the bundle using a wallet
 * signature and instantiate a Keystore instance using the decrypted value.
 */
class NetworkKeystoreProvider {
    async newKeystore(opts, apiClient, wallet) {
        if (!wallet) {
            throw new errors_1.KeystoreProviderUnavailableError('No wallet provided');
        }
        const loader = new NetworkKeyManager_1.default(wallet, new TopicPersistence_1.default(apiClient), opts.preEnableIdentityCallback);
        const keys = await loader.loadPrivateKeyBundle();
        if (!keys) {
            throw new errors_1.KeystoreProviderUnavailableError('No keys found');
        }
        return InMemoryKeystore_1.default.create(keys, await (0, helpers_1.buildPersistenceFromOptions)(opts, keys));
    }
}
exports.default = NetworkKeystoreProvider;
//# sourceMappingURL=NetworkKeystoreProvider.js.map