"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("./errors");
const InMemoryKeystore_1 = __importDefault(require("../InMemoryKeystore"));
const PrivateKeyBundle_1 = require("../../crypto/PrivateKeyBundle");
const helpers_1 = require("./helpers");
/**
 * StaticKeystoreProvider will look for a `privateKeyOverride` in the provided options,
 * and bootstrap a Keystore using those options if provided.
 *
 * If no `privateKeyOverride` is supplied will throw a `KeystoreProviderUnavailableError` causing
 * the client to continue iterating through the `KeystoreProviders` list.
 */
class StaticKeystoreProvider {
    async newKeystore(opts) {
        const { privateKeyOverride } = opts;
        if (!privateKeyOverride) {
            throw new errors_1.KeystoreProviderUnavailableError('No private key override provided');
        }
        const bundle = (0, PrivateKeyBundle_1.decodePrivateKeyBundle)(privateKeyOverride);
        if (bundle instanceof PrivateKeyBundle_1.PrivateKeyBundleV2) {
            throw new Error('V2 private key bundle found. Only V1 supported');
        }
        return InMemoryKeystore_1.default.create(bundle, await (0, helpers_1.buildPersistenceFromOptions)(opts, bundle));
    }
}
exports.default = StaticKeystoreProvider;
//# sourceMappingURL=StaticKeystoreProvider.js.map