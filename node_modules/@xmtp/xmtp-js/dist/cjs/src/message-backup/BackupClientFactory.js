"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchOrCreateConfiguration = exports.createBackupClient = void 0;
const BackupClient_1 = require("./BackupClient");
const NoBackupClient_1 = __importDefault(require("./NoBackupClient"));
const TopicStoreBackupClient_1 = __importDefault(require("./TopicStoreBackupClient"));
/**
 * Creates a backup client of the correct provider type (e.g. xmtp backup, no backup, etc).
 * Uses an existing user preference from the backend if it exists, else prompts for a new
 * one using the `providerSelector`
 *
 * @param walletAddress The public address of the user's wallet
 * @param selectBackupProvider A callback for determining the provider to use, in the event there is no
 * existing user preference. The app can define the policy to use here (e.g. prompt the user,
 * or default to a certain provider type).
 * @returns A backup client of the correct type
 */
async function createBackupClient(walletAddress, selectBackupProvider) {
    const configuration = await fetchOrCreateConfiguration(walletAddress, selectBackupProvider);
    switch (configuration.type) {
        case BackupClient_1.BackupType.none:
            return new NoBackupClient_1.default(configuration);
        case BackupClient_1.BackupType.xmtpTopicStore:
            return new TopicStoreBackupClient_1.default(configuration);
    }
}
exports.createBackupClient = createBackupClient;
async function fetchOrCreateConfiguration(walletAddress, selectBackupProvider) {
    // TODO: return existing configuration from the backend if it exists
    let backupConfiguration;
    const provider = await selectBackupProvider();
    switch (provider.type) {
        case BackupClient_1.BackupType.none:
            backupConfiguration = NoBackupClient_1.default.createConfiguration();
            break;
        case BackupClient_1.BackupType.xmtpTopicStore:
            backupConfiguration =
                TopicStoreBackupClient_1.default.createConfiguration(walletAddress);
            break;
    }
    // TODO: Persist new configuration to backend
    return backupConfiguration;
}
exports.fetchOrCreateConfiguration = fetchOrCreateConfiguration;
//# sourceMappingURL=BackupClientFactory.js.map