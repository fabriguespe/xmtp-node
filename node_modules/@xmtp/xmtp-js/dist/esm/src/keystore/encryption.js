import { encrypt, decrypt, } from '../crypto';
export const decryptV1 = async (myKeys, peerKeys, ciphertext, headerBytes, isSender) => {
    const secret = await myKeys.sharedSecret(peerKeys, myKeys.getCurrentPreKey().publicKey, // assumes that the current preKey is what was used to encrypt
    !isSender);
    return decrypt(ciphertext, secret, headerBytes);
};
export const encryptV1 = async (keys, recipient, message, headerBytes) => {
    const secret = await keys.sharedSecret(recipient, keys.getCurrentPreKey().publicKey, false // assumes that the sender is the party doing the encrypting
    );
    return encrypt(message, secret, headerBytes);
};
export const decryptV2 = (ciphertext, secret, headerBytes) => decrypt(ciphertext, secret, headerBytes);
export const encryptV2 = (payload, secret, headerBytes) => encrypt(payload, secret, headerBytes);
//# sourceMappingURL=encryption.js.map