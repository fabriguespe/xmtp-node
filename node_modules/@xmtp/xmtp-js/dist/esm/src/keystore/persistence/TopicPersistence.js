import { messageApi } from '@xmtp/proto';
import { b64Decode } from '../../utils/bytes';
import { buildUserPrivateStoreTopic } from '../../utils/topic';
export default class TopicPersistence {
    constructor(apiClient) {
        this.apiClient = apiClient;
    }
    // Returns the first record in a topic if it is present.
    async getItem(key) {
        for await (const env of this.apiClient.queryIterator({ contentTopic: this.buildTopic(key) }, {
            pageSize: 1,
            direction: messageApi.SortDirection.SORT_DIRECTION_DESCENDING,
        })) {
            if (!env.message)
                continue;
            try {
                const bytes = b64Decode(env.message.toString());
                return Uint8Array.from(bytes);
            }
            catch (e) {
                console.log(e);
            }
        }
        return null;
    }
    async setItem(key, value) {
        const keys = Uint8Array.from(value);
        await this.apiClient.publish([
            {
                contentTopic: this.buildTopic(key),
                message: keys,
            },
        ]);
    }
    setAuthenticator(authenticator) {
        this.apiClient.setAuthenticator(authenticator);
    }
    buildTopic(key) {
        return buildUserPrivateStoreTopic(key);
    }
}
//# sourceMappingURL=TopicPersistence.js.map