"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Conversation_1 = require("./../src/conversations/Conversation");
const Message_1 = require("../src/Message");
const helpers_1 = require("../test/helpers");
const crypto_1 = require("../src/crypto");
const helpers_2 = require("./helpers");
const benny_1 = require("benny");
const proto_1 = require("@xmtp/proto");
const decodeV1 = () => {
    return helpers_2.MESSAGE_SIZES.map((size) => (0, benny_1.add)(`decode and decrypt a ${size} byte v1 message`, () => __awaiter(void 0, void 0, void 0, function* () {
        const alice = yield (0, helpers_1.newLocalHostClient)();
        const bob = yield (0, helpers_2.newPrivateKeyBundle)();
        const message = (0, helpers_2.randomBytes)(size);
        const encodedMessage = yield Message_1.MessageV1.encode(alice.legacyKeys, bob.getPublicKeyBundle(), yield alice.encodeContent(message), new Date());
        const messageBytes = encodedMessage.toBytes();
        const convo = new Conversation_1.ConversationV1(alice, bob.identityKey.publicKey.walletSignatureAddress(), new Date());
        const envelope = {
            contentTopic: convo.topic,
            message: proto_1.fetcher.b64Encode(messageBytes, 0, messageBytes.length),
        };
        return () => __awaiter(void 0, void 0, void 0, function* () {
            yield convo.decodeMessage(envelope);
        });
    })));
};
const decodeV2 = () => {
    return helpers_2.MESSAGE_SIZES.map((size) => (0, benny_1.add)(`decode and decrypt a ${size} byte v2 message`, () => __awaiter(void 0, void 0, void 0, function* () {
        const alice = yield (0, helpers_1.newLocalHostClient)();
        const bob = yield (0, helpers_2.newPrivateKeyBundle)();
        const message = (0, helpers_2.randomBytes)(size);
        const convo = new Conversation_1.ConversationV2(alice, 'xmtp/0/foo', crypto_1.utils.getRandomValues(new Uint8Array(32)), bob.identityKey.publicKey.walletSignatureAddress(), new Date(), undefined);
        const encodedMessage = yield convo.encodeMessage(message);
        const messageBytes = encodedMessage.toBytes();
        const envelope = {
            contentTopic: convo.topic,
            message: proto_1.fetcher.b64Encode(messageBytes, 0, messageBytes.length),
        };
        return () => __awaiter(void 0, void 0, void 0, function* () {
            yield convo.decodeMessage(envelope);
        });
    })));
};
exports.default = (0, helpers_2.wrapSuite)('decode', ...decodeV1(), ...decodeV2());
//# sourceMappingURL=decode.js.map