"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Conversation_1 = require("./../src/conversations/Conversation");
const Message_1 = require("../src/Message");
const benny_1 = require("benny");
const src_1 = require("../src");
const helpers_1 = require("../test/helpers");
const crypto_1 = require("../src/crypto");
const helpers_2 = require("./helpers");
const encodeV1 = () => {
    return helpers_2.MESSAGE_SIZES.map((size) => (0, benny_1.add)(`encode and encrypt a ${size} byte v1 message`, () => __awaiter(void 0, void 0, void 0, function* () {
        const alice = yield src_1.Client.create((0, helpers_1.newWallet)(), { env: 'local' });
        const bobKeys = (yield (0, helpers_2.newPrivateKeyBundle)()).getPublicKeyBundle();
        const message = (0, helpers_2.randomBytes)(size);
        const timestamp = new Date();
        // The returned function is the actual benchmark. Everything above is setup
        return () => __awaiter(void 0, void 0, void 0, function* () {
            const encodedMessage = yield alice.encodeContent(message);
            yield Message_1.MessageV1.encode(alice.legacyKeys, bobKeys, encodedMessage, timestamp);
        });
    })));
};
const encodeV2 = () => {
    // All these sizes should take roughly the same amount of time
    return helpers_2.MESSAGE_SIZES.map((size) => (0, benny_1.add)(`encode and encrypt a ${size} byte v2 message`, () => __awaiter(void 0, void 0, void 0, function* () {
        const alice = yield (0, helpers_1.newLocalHostClient)();
        const topicKey = crypto_1.utils.getRandomValues(new Uint8Array(32));
        const convo = new Conversation_1.ConversationV2(alice, 'xmtp/0/foo', topicKey, '0xf00', new Date(), undefined);
        const message = (0, helpers_2.randomBytes)(size);
        // The returned function is the actual benchmark. Everything above is setup
        return () => __awaiter(void 0, void 0, void 0, function* () {
            yield convo.encodeMessage(message);
        });
    })));
};
exports.default = (0, helpers_2.wrapSuite)('encode', ...encodeV1(), ...encodeV2());
//# sourceMappingURL=encode.js.map