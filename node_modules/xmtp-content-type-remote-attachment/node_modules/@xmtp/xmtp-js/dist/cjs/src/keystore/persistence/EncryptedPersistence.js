"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const eccrypto_1 = __importDefault(require("eccrypto"));
const IV_LENGTH = 16;
const EPHEMERAL_PUBLIC_KEY_LENGTH = 65;
const MAC_LENGTH = 32;
const AES_BLOCK_SIZE = 16;
const MIN_DATA_LENGTH = IV_LENGTH + EPHEMERAL_PUBLIC_KEY_LENGTH + MAC_LENGTH + AES_BLOCK_SIZE;
const assertEciesLengths = (ecies) => {
    if (ecies.iv.length !== IV_LENGTH) {
        throw new Error('Invalid iv length');
    }
    if (ecies.ephemPublicKey.length !== EPHEMERAL_PUBLIC_KEY_LENGTH) {
        throw new Error('Invalid ephemPublicKey length');
    }
    if (ecies.ciphertext.length < 1 ||
        ecies.ciphertext.length % AES_BLOCK_SIZE !== 0) {
        throw new Error('Invalid ciphertext length');
    }
    if (ecies.mac.length !== MAC_LENGTH) {
        throw new Error('Invalid mac length');
    }
};
const serializeEcies = (ecies) => {
    assertEciesLengths(ecies);
    const { iv, ephemPublicKey, ciphertext, mac } = ecies;
    const result = new Uint8Array(iv.length + ephemPublicKey.length + ciphertext.length + mac.length);
    result.set(iv, 0);
    result.set(ephemPublicKey, IV_LENGTH);
    result.set(ciphertext, IV_LENGTH + EPHEMERAL_PUBLIC_KEY_LENGTH);
    result.set(mac, IV_LENGTH + EPHEMERAL_PUBLIC_KEY_LENGTH + ciphertext.length);
    return result;
};
const deserializeEcies = (data) => {
    if (data.length < MIN_DATA_LENGTH ||
        (data.length - MIN_DATA_LENGTH) % AES_BLOCK_SIZE !== 0) {
        throw new Error('Invalid data length');
    }
    const iv = data.slice(0, IV_LENGTH);
    const ephemPublicKey = data.slice(IV_LENGTH, IV_LENGTH + EPHEMERAL_PUBLIC_KEY_LENGTH);
    const ciphertext = data.slice(IV_LENGTH + EPHEMERAL_PUBLIC_KEY_LENGTH, data.length - MAC_LENGTH);
    const mac = data.slice(data.length - MAC_LENGTH, data.length);
    return {
        iv: Buffer.from(iv),
        ephemPublicKey: Buffer.from(ephemPublicKey),
        ciphertext: Buffer.from(ciphertext),
        mac: Buffer.from(mac),
    };
};
/**
 * EncryptedPersistence is a Persistence implementation that uses ECIES to encrypt all values
 * ECIES encryption protects against unauthorized reads, but not unauthorized writes.
 * A third party with access to the underlying store could write malicious data using the public key of the owner
 */
class EncryptedPersistence {
    constructor(persistence, privateKey) {
        this.persistence = persistence;
        this.privateKey = Buffer.from(privateKey);
        this.publicKey = eccrypto_1.default.getPublic(this.privateKey);
    }
    getItem(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const encrypted = yield this.persistence.getItem(key);
            if (encrypted) {
                return this.decrypt(encrypted);
            }
            return null;
        });
    }
    setItem(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            const encrypted = yield this.encrypt(value);
            yield this.persistence.setItem(key, encrypted);
        });
    }
    encrypt(value) {
        return __awaiter(this, void 0, void 0, function* () {
            const ecies = yield eccrypto_1.default.encrypt(this.publicKey, Buffer.from(value));
            return serializeEcies(ecies);
        });
    }
    decrypt(value) {
        return __awaiter(this, void 0, void 0, function* () {
            const ecies = deserializeEcies(value);
            const result = yield eccrypto_1.default.decrypt(this.privateKey, ecies);
            return Uint8Array.from(result);
        });
    }
}
exports.default = EncryptedPersistence;
//# sourceMappingURL=EncryptedPersistence.js.map