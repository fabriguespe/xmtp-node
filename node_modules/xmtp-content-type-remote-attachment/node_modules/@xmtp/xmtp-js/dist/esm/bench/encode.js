var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ConversationV2 } from './../src/conversations/Conversation';
import { MessageV1 } from '../src/Message';
import { add } from 'benny';
import { Client } from '../src';
import { newWallet, newLocalHostClient } from '../test/helpers';
import { utils } from '../src/crypto';
import { MESSAGE_SIZES, newPrivateKeyBundle, randomBytes, wrapSuite, } from './helpers';
const encodeV1 = () => {
    return MESSAGE_SIZES.map((size) => add(`encode and encrypt a ${size} byte v1 message`, () => __awaiter(void 0, void 0, void 0, function* () {
        const alice = yield Client.create(newWallet(), { env: 'local' });
        const bobKeys = (yield newPrivateKeyBundle()).getPublicKeyBundle();
        const message = randomBytes(size);
        const timestamp = new Date();
        // The returned function is the actual benchmark. Everything above is setup
        return () => __awaiter(void 0, void 0, void 0, function* () {
            const encodedMessage = yield alice.encodeContent(message);
            yield MessageV1.encode(alice.legacyKeys, bobKeys, encodedMessage, timestamp);
        });
    })));
};
const encodeV2 = () => {
    // All these sizes should take roughly the same amount of time
    return MESSAGE_SIZES.map((size) => add(`encode and encrypt a ${size} byte v2 message`, () => __awaiter(void 0, void 0, void 0, function* () {
        const alice = yield newLocalHostClient();
        const topicKey = utils.getRandomValues(new Uint8Array(32));
        const convo = new ConversationV2(alice, 'xmtp/0/foo', topicKey, '0xf00', new Date(), undefined);
        const message = randomBytes(size);
        // The returned function is the actual benchmark. Everything above is setup
        return () => __awaiter(void 0, void 0, void 0, function* () {
            yield convo.encodeMessage(message);
        });
    })));
};
export default wrapSuite('encode', ...encodeV1(), ...encodeV2());
//# sourceMappingURL=encode.js.map