var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { publicKey } from '@xmtp/proto';
import * as secp from '@noble/secp256k1';
import Long from 'long';
import Signature, { WalletSigner } from './Signature';
import { equalBytes, hexToBytes } from './utils';
import { utils } from 'ethers';
import { sha256 } from './encryption';
// Validate a key.
function secp256k1UncompressedCheck(key) {
    if (key.bytes.length !== 65) {
        throw new Error(`invalid public key length: ${key.bytes.length}`);
    }
    if (key.bytes[0] !== 4) {
        throw new Error(`unrecognized public key prefix: ${key.bytes[0]}`);
    }
}
const MS_NS_TIMESTAMP_THRESHOLD = new Long(Math.pow(10, 9)).mul(Math.pow(10, 9));
// Basic public key without a signature.
export class UnsignedPublicKey {
    constructor(obj) {
        if (!(obj === null || obj === void 0 ? void 0 : obj.secp256k1Uncompressed)) {
            throw new Error('invalid public key');
        }
        secp256k1UncompressedCheck(obj.secp256k1Uncompressed);
        this.secp256k1Uncompressed = obj.secp256k1Uncompressed;
        this.createdNs = obj.createdNs.toUnsigned();
    }
    // The time the key was generated.
    generated() {
        return new Date(this.timestamp.toNumber());
    }
    isFromLegacyKey() {
        return this.createdNs.lessThan(MS_NS_TIMESTAMP_THRESHOLD);
    }
    // creation time in milliseconds
    get timestamp() {
        return (this.isFromLegacyKey() ? this.createdNs : this.createdNs.div(1000000)).toUnsigned();
    }
    // Verify that signature was created from the digest using matching private key.
    verify(signature, digest) {
        if (!signature.ecdsaCompact) {
            return false;
        }
        return secp.verify(signature.ecdsaCompact.bytes, digest, this.secp256k1Uncompressed.bytes);
    }
    // Verify that the provided public key was signed by matching private key.
    verifyKey(pub) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!pub.signature) {
                return false;
            }
            const digest = yield sha256(pub.bytesToSign());
            return this.verify(pub.signature, digest);
        });
    }
    // Is other the same/equivalent public key?
    equals(other) {
        return equalBytes(this.secp256k1Uncompressed.bytes, other.secp256k1Uncompressed.bytes);
    }
    // Derive Ethereum address from this public key.
    getEthereumAddress() {
        return utils.computeAddress(this.secp256k1Uncompressed.bytes);
    }
    // Encode public key into bytes.
    toBytes() {
        return publicKey.UnsignedPublicKey.encode(this).finish();
    }
    // Decode public key from bytes.
    static fromBytes(bytes) {
        return new UnsignedPublicKey(publicKey.UnsignedPublicKey.decode(bytes));
    }
}
// Public key signed by another key pair or a wallet.
export class SignedPublicKey extends UnsignedPublicKey {
    constructor(obj) {
        if (!obj.keyBytes) {
            throw new Error('missing key bytes');
        }
        super(publicKey.UnsignedPublicKey.decode(obj.keyBytes));
        this.keyBytes = obj.keyBytes;
        if (!obj.signature) {
            throw new Error('missing key signature');
        }
        this.signature = new Signature(obj.signature);
    }
    // Return the key without the signature.
    get unsignedKey() {
        return new UnsignedPublicKey({
            createdNs: this.createdNs,
            secp256k1Uncompressed: this.secp256k1Uncompressed,
        });
    }
    // Return public key of the signer of this key.
    signerKey() {
        return this.signature.signerKey(this);
    }
    // Assume the key was signed by a wallet and
    // return the wallet address that validates
    // the signature of this key.
    walletSignatureAddress() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.signature.walletEcdsaCompact) {
                throw new Error('key was not signed by a wallet');
            }
            const pk = yield this.signerKey();
            if (!pk) {
                throw new Error('key signature not valid');
            }
            return pk.getEthereumAddress();
        });
    }
    // Is other the same/equivalent public key?
    equals(other) {
        return (this.unsignedKey.equals(other.unsignedKey) &&
            this.signature.equals(other.signature));
    }
    // Return bytes of the encoded unsigned key.
    bytesToSign() {
        return this.keyBytes;
    }
    // Encode signed key into bytes.
    toBytes() {
        return publicKey.SignedPublicKey.encode(this).finish();
    }
    // Decode signed key from bytes.
    static fromBytes(bytes) {
        return new SignedPublicKey(publicKey.SignedPublicKey.decode(bytes));
    }
    toLegacyKey() {
        if (!this.isFromLegacyKey()) {
            throw new Error('cannot be converted to legacy key');
        }
        let signature = this.signature;
        if (signature.walletEcdsaCompact) {
            signature = new Signature({
                ecdsaCompact: signature.walletEcdsaCompact,
            });
        }
        return new PublicKey({
            timestamp: this.timestamp,
            secp256k1Uncompressed: this.secp256k1Uncompressed,
            signature,
        });
    }
    static fromLegacyKey(legacyKey, signedByWallet) {
        if (!legacyKey.signature) {
            throw new Error('key is not signed');
        }
        let signature = legacyKey.signature;
        if (signedByWallet) {
            signature = new Signature({
                walletEcdsaCompact: signature.ecdsaCompact,
            });
        }
        return new SignedPublicKey({
            keyBytes: legacyKey.bytesToSign(),
            signature,
        });
    }
}
// LEGACY: PublicKey optionally signed with another trusted key pair or a wallet.
// PublicKeys can be generated through PrivateKey.generate()
export class PublicKey extends UnsignedPublicKey {
    constructor(obj) {
        super({
            createdNs: obj.timestamp.mul(1000000),
            secp256k1Uncompressed: obj.secp256k1Uncompressed,
        });
        if (obj.signature) {
            this.signature = new Signature(obj.signature);
        }
    }
    get timestamp() {
        return this.createdNs.div(1000000);
    }
    bytesToSign() {
        return publicKey.PublicKey.encode({
            timestamp: this.timestamp,
            secp256k1Uncompressed: this.secp256k1Uncompressed,
        }).finish();
    }
    // sign the key using a wallet
    signWithWallet(wallet) {
        return __awaiter(this, void 0, void 0, function* () {
            const sigString = yield wallet.signMessage(WalletSigner.identitySigRequestText(this.bytesToSign()));
            const eSig = utils.splitSignature(sigString);
            const r = hexToBytes(eSig.r);
            const s = hexToBytes(eSig.s);
            const sigBytes = new Uint8Array(64);
            sigBytes.set(r);
            sigBytes.set(s, r.length);
            this.signature = new Signature({
                ecdsaCompact: {
                    bytes: sigBytes,
                    recovery: eSig.recoveryParam,
                },
            });
        });
    }
    // Assume the key was signed by a wallet and
    // return the wallet address that validates
    // the signature for this key.
    walletSignatureAddress() {
        if (!this.signature) {
            throw new Error('key is not signed');
        }
        const digest = hexToBytes(utils.hashMessage(WalletSigner.identitySigRequestText(this.bytesToSign())));
        const pk = this.signature.getPublicKey(digest);
        if (!pk) {
            throw new Error('key signature is malformed');
        }
        return pk.getEthereumAddress();
    }
    toBytes() {
        return publicKey.PublicKey.encode(this).finish();
    }
    static fromBytes(bytes) {
        return new PublicKey(publicKey.PublicKey.decode(bytes));
    }
}
//# sourceMappingURL=PublicKey.js.map