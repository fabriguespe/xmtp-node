var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { signature } from '@xmtp/proto';
import Long from 'long';
import * as secp from '@noble/secp256k1';
import { PublicKey, UnsignedPublicKey, SignedPublicKey } from './PublicKey';
import { SignedPrivateKey } from './PrivateKey';
import { utils } from 'ethers';
import { bytesToHex, equalBytes, hexToBytes } from './utils';
// Validate signature.
function ecdsaCheck(sig) {
    if (sig.bytes.length !== 64) {
        throw new Error(`invalid signature length: ${sig.bytes.length}`);
    }
    if (sig.recovery !== 0 && sig.recovery !== 1) {
        throw new Error(`invalid recovery bit: ${sig.recovery}`);
    }
}
// Compare signatures.
function ecdsaEqual(a, b) {
    return a.recovery === b.recovery && equalBytes(a.bytes, b.bytes);
}
// Derive public key of the signer from the digest and the signature.
export function ecdsaSignerKey(digest, signature) {
    const bytes = secp.recoverPublicKey(digest, signature.bytes, signature.recovery);
    return bytes
        ? new UnsignedPublicKey({
            secp256k1Uncompressed: { bytes },
            createdNs: Long.fromNumber(0),
        })
        : undefined;
}
export default class Signature {
    constructor(obj) {
        if (obj.ecdsaCompact) {
            ecdsaCheck(obj.ecdsaCompact);
            this.ecdsaCompact = obj.ecdsaCompact;
        }
        else if (obj.walletEcdsaCompact) {
            ecdsaCheck(obj.walletEcdsaCompact);
            this.walletEcdsaCompact = obj.walletEcdsaCompact;
        }
        else {
            throw new Error('invalid signature');
        }
    }
    // Return the public key that validates provided key's signature.
    signerKey(key) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.ecdsaCompact) {
                return SignedPrivateKey.signerKey(key, this.ecdsaCompact);
            }
            else if (this.walletEcdsaCompact) {
                return WalletSigner.signerKey(key, this.walletEcdsaCompact);
            }
            else {
                return undefined;
            }
        });
    }
    // LEGACY: Return the public key that validates this signature given the provided digest.
    // Return undefined if the signature is malformed.
    getPublicKey(digest) {
        if (!this.ecdsaCompact) {
            throw new Error('invalid signature');
        }
        const bytes = secp.recoverPublicKey(digest, this.ecdsaCompact.bytes, this.ecdsaCompact.recovery);
        return bytes
            ? new PublicKey({
                secp256k1Uncompressed: { bytes },
                timestamp: Long.fromNumber(0),
            })
            : undefined;
    }
    // Is this the same/equivalent signature as other?
    equals(other) {
        if (this.ecdsaCompact && other.ecdsaCompact) {
            return ecdsaEqual(this.ecdsaCompact, other.ecdsaCompact);
        }
        if (this.walletEcdsaCompact && other.walletEcdsaCompact) {
            return ecdsaEqual(this.walletEcdsaCompact, other.walletEcdsaCompact);
        }
        return false;
    }
    toBytes() {
        return signature.Signature.encode(this).finish();
    }
    static fromBytes(bytes) {
        return new Signature(signature.Signature.decode(bytes));
    }
}
// A wallet based KeySigner.
export class WalletSigner {
    constructor(wallet) {
        this.wallet = wallet;
    }
    static identitySigRequestText(keyBytes) {
        // Note that an update to this signature request text will require
        // addition of backward compatibility for existing signatures
        // and/or a migration; otherwise clients will fail to verify previously
        // signed keys.
        return ('XMTP : Create Identity\n' +
            `${bytesToHex(keyBytes)}\n` +
            '\n' +
            'For more info: https://xmtp.org/signatures/');
    }
    static signerKey(key, signature) {
        const digest = hexToBytes(utils.hashMessage(this.identitySigRequestText(key.bytesToSign())));
        return ecdsaSignerKey(digest, signature);
    }
    signKey(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const keyBytes = key.toBytes();
            const sigString = yield this.wallet.signMessage(WalletSigner.identitySigRequestText(keyBytes));
            const eSig = utils.splitSignature(sigString);
            const r = hexToBytes(eSig.r);
            const s = hexToBytes(eSig.s);
            const sigBytes = new Uint8Array(64);
            sigBytes.set(r);
            sigBytes.set(s, r.length);
            const signature = new Signature({
                walletEcdsaCompact: {
                    bytes: sigBytes,
                    recovery: eSig.recoveryParam,
                },
            });
            return new SignedPublicKey({ keyBytes, signature });
        });
    }
}
//# sourceMappingURL=Signature.js.map