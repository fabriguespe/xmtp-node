import { signature } from '@xmtp/proto';
import { PublicKey, UnsignedPublicKey, SignedPublicKey } from './PublicKey';
import { Signer } from '../types/Signer';
export declare type ECDSACompactWithRecovery = {
    bytes: Uint8Array;
    recovery: number;
};
export declare function ecdsaSignerKey(digest: Uint8Array, signature: ECDSACompactWithRecovery): UnsignedPublicKey | undefined;
export default class Signature implements signature.Signature {
    ecdsaCompact: ECDSACompactWithRecovery | undefined;
    walletEcdsaCompact: ECDSACompactWithRecovery | undefined;
    constructor(obj: Partial<signature.Signature>);
    signerKey(key: SignedPublicKey): Promise<UnsignedPublicKey | undefined>;
    getPublicKey(digest: Uint8Array): PublicKey | undefined;
    equals(other: Signature): boolean;
    toBytes(): Uint8Array;
    static fromBytes(bytes: Uint8Array): Signature;
}
export interface KeySigner {
    signKey(key: UnsignedPublicKey): Promise<SignedPublicKey>;
}
export declare class WalletSigner implements KeySigner {
    wallet: Signer;
    constructor(wallet: Signer);
    static identitySigRequestText(keyBytes: Uint8Array): string;
    static signerKey(key: SignedPublicKey, signature: ECDSACompactWithRecovery): UnsignedPublicKey | undefined;
    signKey(key: UnsignedPublicKey): Promise<SignedPublicKey>;
}
