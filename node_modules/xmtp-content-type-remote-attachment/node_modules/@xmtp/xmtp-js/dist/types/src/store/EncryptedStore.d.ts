import { Store } from './Store';
import { Signer } from '../types/Signer';
import { PrivateKeyBundleV1 } from '../crypto';
import { KeyStore } from './KeyStore';
/**
 * EncryptedKeyStore wraps Store to enable encryption of private key bundles
 * using a wallet signature.
 */
export default class EncryptedKeyStore implements KeyStore {
    private store;
    private signer;
    constructor(signer: Signer, store: Store);
    private getStorageAddress;
    loadPrivateKeyBundle(): Promise<PrivateKeyBundleV1 | null>;
    storePrivateKeyBundle(bundle: PrivateKeyBundleV1): Promise<void>;
    toEncryptedBytes(bundle: PrivateKeyBundleV1, wallet: Signer): Promise<Uint8Array>;
    fromEncryptedBytes(wallet: Signer, bytes: Uint8Array): Promise<[PrivateKeyBundleV1, boolean]>;
}
export declare function storageSigRequestText(preKey: Uint8Array): string;
